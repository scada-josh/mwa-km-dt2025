/* eslint-disable @typescript-eslint/no-explicit-any */
// =========================
//  LINE Utility Functions
// =========================
import axios, { AxiosResponse } from 'axios'
import * as jose from 'node-jose'
import crypto from 'crypto'

import { lineOauthPrivate } from '../../../../Line Dev/workshop-line-chatbot-ai-5/workshop/webhook/functions/src/utils/linePrivateKey' // ‡∏ï‡πâ‡∏≠‡∏á export jwk ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô RSA key
// import {
//   LineAccessTokenResponse,
//   LineProfile,
//   LineProfileIdTokenResponse,
//   JwtPayload,
//   JwtHeader,
//   AnimationLoadingResponse,
//   QuotaResponse,
//   ConsumptionResponse,
//   FollowerResponse,
//   BroadcastPayload,
//   LineMessage,
//   MulticastPayload,
//   LineLoginProfileResponse,
//   ServiceNotificationTokenResponse,
// } from '@types/line'

import {
  LineAccessTokenResponse,
  LineProfile,
  LineProfileIdTokenResponse,
  JwtPayload,
  JwtHeader,
  AnimationLoadingResponse,
  QuotaResponse,
  ConsumptionResponse,
  FollowerResponse,
  BroadcastPayload,
  LineMessage,
  MulticastPayload,
  LineLoginProfileResponse,
  ServiceNotificationTokenResponse,
} from './types/line'

import { redisGet, redisSet } from '../../../../Line Dev/workshop-line-chatbot-ai-5/workshop/webhook/functions/src/utils/redis'
// import { LineProfile } from './types/line'

export const lineApiInstance = axios.create({
  baseURL: process.env.LINE_MESSAGING_API,
})

export const lineBlobInstance = axios.create({
  baseURL: process.env.LINE_DATA_MESSAGING_API,
})
/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á LINE signature ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏Å‡∏±‡∏ö webhook
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤ request ‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE ‡∏à‡∏£‡∏¥‡∏á
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ rawBody ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å parse ‡πÅ‡∏•‡∏∞ channel secret ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
export function validateLineSignature(rawBody: Buffer | string, signature: string): boolean {
  const hmac = crypto.createHmac('sha256', process.env.LINE_MESSAGING_CHANNEL_SECRET!)
  hmac.update(rawBody)
  const expectedSignature = hmac.digest('base64')

  return expectedSignature === signature
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å userId
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á displayName, pictureUrl ‡∏Ø‡∏•‡∏Ø ‡∏Ç‡∏≠‡∏á user
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ access token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user ‡∏ó‡∏µ‡πà add bot ‡πÅ‡∏•‡πâ‡∏ß
 */
export const getProfile = async (userId: string): Promise<LineProfile> => {
  try {
    const url = `${process.env.LINE_MESSAGING_API}/profile/${userId}`
    const response: AxiosResponse<LineProfile> = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${process.env.LINE_MESSAGING_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
    })
    return response.data
  } catch (error: any) {
    console.error('Error fetching user profile:', error.response?.data || error.message)
    throw error
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å idToken (LINE Login)
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Login flow ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * Limitation: idToken ‡∏ï‡πâ‡∏≠‡∏á valid ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 */
export const getProfileByIDToken = async (idToken: string): Promise<LineProfileIdTokenResponse> => {
  try {
    const url = `${process.env.LINE_ENDPOINT_API_VERIFY}`
    const response = await axios.post(
      url,
      {
        id_token: idToken,
        client_id: process.env.LINE_LIFF_CHANNEL_ID,
      },
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      },
    )

    return response.data
  } catch (error: any) {
    console.error('Error fetching profile by ID token:', error.response?.data || error.message)
    throw error
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Redis cache ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å LINE API ‡πÅ‡∏•‡πâ‡∏ß cache ‡πÑ‡∏ß‡πâ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
 * ‡πÉ‡∏ä‡πâ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô call ‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE API
 * Limitation: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà real-time ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á cache
 */
export const getProfileCache = async (userId: string): Promise<LineProfile> => {
  const cacheKey = `line:profile:${userId}`
  const cacheTTL = 60 * 5 // ‚úÖ 5 ‡∏ô‡∏≤‡∏ó‡∏µ

  try {
    const cached = await redisGet(cacheKey)
    if (cached) {
      return JSON.parse(cached) as LineProfile
    }

    const url = `${process.env.LINE_MESSAGING_API}/profile/${userId}`
    const response: AxiosResponse<LineProfile> = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${process.env.LINE_MESSAGING_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
    })

    const profile = response.data
    await redisSet(cacheKey, JSON.stringify(profile), cacheTTL) // ‚úÖ TTL 5 ‡∏ô‡∏≤‡∏ó‡∏µ

    return profile
  } catch (error: any) {
    console.error('Error fetching user profile:', error.response?.data || error.message)
    throw error
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô group
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö group chat ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * Limitation: ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ group ‡∏ó‡∏µ‡πà bot ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞ user ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà block
 */
export const getProfileByGroup = async (groupId: string, userId: string): Promise<LineProfile> => {
  try {
    const url = `${process.env.LINE_MESSAGING_API}/group/${groupId}/member/${userId}`
    const response: AxiosResponse<LineProfile> = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${process.env.LINE_MESSAGING_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
    })
    return response.data
  } catch (error: any) {
    console.error('Error fetching group user profile:', error.response?.data || error.message)
    throw error
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• summary ‡∏Ç‡∏≠‡∏á group
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ group, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏Ø‡∏•‡∏Ø
 * Limitation: ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ group ‡∏ó‡∏µ‡πà bot ‡∏≠‡∏¢‡∏π‡πà
 */
export const groupInfo = async (groupId: string): Promise<any> => {
  try {
    const url = `${process.env.LINE_MESSAGING_API}/group/${groupId}/summary/`
    const response: AxiosResponse<any> = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${process.env.LINE_MESSAGING_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
    })
    return response.data
  } catch (error: any) {
    console.error('Error fetching group profile:', error.response?.data || error.message)
    throw error
  }
}

/**
 * ‡∏™‡πà‡∏á animation loading (typing...) ‡πÉ‡∏´‡πâ user
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
 * Limitation: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ, ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ stateless access token
 */
export const isAnimationLoading = async (userId: string): Promise<AnimationLoadingResponse> => {
  try {

    const url = `${process.env.LINE_MESSAGING_API}/chat/loading/start`
    const payload = {
      chatId: userId,
      loadingSeconds: 10, // allowed values: 5,10,15,...,60
    }

    const response: AxiosResponse<AnimationLoadingResponse> = await axios.post(url, payload, {
      headers: {
        Authorization: `Bearer ${process.env.LINE_MESSAGING_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
    })

    if (response.status === 202) {
      return response.data
    } else {
      throw new Error(`‚ùå Failed to send animation loading. Status: ${response.status}`)
    }
  } catch (error: any) {
    console.error('üî• Error sending animation loading:', error.response?.data || error.message)
    throw error
  }
}

/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° reply ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (replyToken)
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô 1:1 ‡∏´‡∏£‡∏∑‡∏≠ group
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á reply ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö event, ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á
 */
export const reply = async (token: string, payload: any[]): Promise<any> => {
  const url = `${process.env.LINE_MESSAGING_API}/message/reply`
  const response: AxiosResponse<any> = await axios.post(
    url,
    { replyToken: token, messages: payload },
    {
      headers: {
        Authorization: `Bearer ${process.env.LINE_MESSAGING_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
    },
  )
  return response.data
}

/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° reply ‡∏î‡πâ‡∏ß‡∏¢ stateless access token
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö use case ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ security ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ stateless access token ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
 */
export const replyWithStateless = async (token: string, payload: any[]): Promise<any> => {
  const accessToken = await issueMessagingStatelessChannelAccessToken()
  const url = `${process.env.LINE_MESSAGING_API}/message/reply`
  const response: AxiosResponse<any> = await axios.post(
    url,
    { replyToken: token, messages: payload },
    {
      headers: {
        Authorization: `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
    },
  )
  return response.data
}

/**
 * ‡∏î‡∏∂‡∏á binary content (image, video, file ‡∏Ø‡∏•‡∏Ø) ‡∏à‡∏≤‡∏Å messageId
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
 * Limitation: ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ message ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (7 ‡∏ß‡∏±‡∏ô), ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ access token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
export const getContent = async (messageId: string): Promise<Buffer> => {
  try {
    const url = `${process.env.LINE_DATA_MESSAGING_API}/message/${messageId}/content`

    console.log('url', url)
    const response: AxiosResponse<Buffer> = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${process.env.LINE_MESSAGING_ACCESS_TOKEN}`,
      },
      responseType: 'arraybuffer',
    })
    return response.data
  } catch (error: any) {
    console.error('Error fetching content:', error.response?.data || error.message)
    throw error
  }
}

/**
 * ‡∏´‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å messageType ‡∏´‡∏£‡∏∑‡∏≠ fileName
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 * Limitation: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô file ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ fileName ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
 */
export const getExtension = (fileName: string, messageType: string): string => {
  let extension = ''
  switch (messageType) {
    case 'image':
      extension = 'png'
      break
    case 'video':
      extension = 'mp4'
      break
    case 'audio':
      extension = 'm4a'
      break
    case 'file':
      const regex = /\.([0-9a-z]+)(?:[\?#]|$)/i
      const match = regex.exec(fileName)
      extension = match ? match[1] : ''
      break
  }

  return extension
}

/**
 * ‡∏Ç‡∏≠ stateless access token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö channel (expires 15 ‡∏ô‡∏≤‡∏ó‡∏µ)
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ stateless token
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ, cache ‡πÑ‡∏î‡πâ‡πÉ‡∏ô Redis
 */
export const issueStatelessChannelAccessToken = async (
  channelId: string,
  channelSecret: string,
): Promise<string> => {
  try {
    const cacheKey = `line:token:${channelId}_${channelSecret}`

    // // Try to get token from Redis
    let token = await redisGet(cacheKey)

    // console.log('Stateless token cache key:', token)

    if (!token) {
      const url = `${process.env.LINE_MESSAGING_OAUTH_ISSUE_TOKENV3}`
      const response: AxiosResponse<LineAccessTokenResponse> = await axios.post(
        url,
        new URLSearchParams({
          grant_type: 'client_credentials',
          client_id: channelId,
          client_secret: channelSecret,
        }),
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
        },
      )

      if (response.data?.access_token) {
        token = response.data.access_token
        console.log('Stateless access token issued:', token)
        await redisSet(cacheKey, token, (response.data.expires_in || 900) - 60) // 15 ‡∏ô‡∏≤‡∏ó‡∏µ - 1 ‡∏ô‡∏≤‡∏ó‡∏µ (60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        return token
      } else {
        throw new Error('Failed to obtain stateless access token.')
      }
    }

    return token
  } catch (error: any) {
    // console.error('Error issuing token:', error.message)
    throw error
  }
}

const issueMessagingStatelessChannelAccessToken = async (): Promise<string> => {
  return issueStatelessChannelAccessToken(
    process.env.LINE_MESSAGING_CHANNEL_ID!,
    process.env.LINE_MESSAGING_CHANNEL_SECRET!,
  )
}

const issueLiffStatelessChannelAccessToken = async (): Promise<string> => {
  return issueStatelessChannelAccessToken(
    process.env.LINE_LIFF_CHANNEL_ID!,
    process.env.LINE_LIFF_CHANNEL_SECRET!,
  )
}

/**
 * Channel Access Token v2.1 (JWT) - max 30 days, cached in Redis for 30 minutes
 */
export const issueTokenv2_1 = async (): Promise<string> => {
  try {
    const channelId = process.env.LINE_MESSAGING_CHANNEL_ID!
    const cacheKey = `line:token:v2.1:${channelId}`
    const tokenExp = 60 * 60 * 24 // 1 day

    // 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏à‡∏≤‡∏Å Redis ‡∏Å‡πà‡∏≠‡∏ô
    let token = await redisGet(cacheKey)
    if (token) {
      return token
    }

    // 2Ô∏è‚É£ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Redis ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ JWT
    const jwkRaw = lineOauthPrivate.privateKey
    const jwk = await jose.JWK.asKey(jwkRaw) // ‡πÅ‡∏õ‡∏•‡∏á JWK object ‚Üí Key object

    const LINE_SIGNING_KEY: JwtHeader = {
      alg: 'RS256',
      typ: 'JWT',
      kid: process.env.ASSERTION_SIGNING_KEY,
    }

    const now = Math.floor(Date.now() / 1000)
    const payload: JwtPayload = {
      iss: channelId,
      sub: channelId,
      aud: 'https://api.line.me/',
      exp: now + 1800, // 30 ‡∏ô‡∏≤‡∏ó‡∏µ
      token_exp: tokenExp, // 1 ‡∏ß‡∏±‡∏ô
    }

    const clientAssertion = (await jose.JWS.createSign(
      { format: 'compact', fields: LINE_SIGNING_KEY },
      jwk,
    )
      .update(JSON.stringify(payload))
      .final()) as unknown as string

    const data = new URLSearchParams({
      grant_type: 'client_credentials',
      client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',
      client_assertion: clientAssertion,
    })

    const response: AxiosResponse<LineAccessTokenResponse> = await axios.post(
      process.env.LINE_MESSAGING_OAUTH_ISSUE_TOKENV2!,
      data,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      },
    )

    if (response.status === 200 && response.data?.access_token) {
      token = response.data.access_token

      await redisSet(cacheKey, token, tokenExp)
      return token
    } else {
      console.error('LINE OAuth Response:', response.data)
      throw new Error('‚ùå Failed to obtain v2.1 access token.')
    }
  } catch (error: any) {
    console.error('üî• Error issuing JWT token:', error.response?.data || error.message)
    throw error
  }
}

/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° broadcast ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö quota ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á, ‡πÉ‡∏ä‡πâ stateless access token
 * Limitation: quota ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
 */
export const broadcastConsumption = async (payload: BroadcastPayload): Promise<void> => {
  try {
    const accessToken = await issueMessagingStatelessChannelAccessToken()

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const [quotaMessage, quotaConsumption, numberOfFollowers]: [
      QuotaResponse,
      ConsumptionResponse,
      FollowerResponse,
    ] = await Promise.all([
      getQuota(accessToken),
      getConsumption(accessToken),
      getNumberOfFollowers(accessToken),
    ])

    console.log('Quota:', quotaMessage)
    console.log('Consumption:', quotaConsumption)
    console.log('Number Of Followers:', numberOfFollowers)

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡πà‡∏≤ quota ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ > ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const remainingQuota = quotaMessage.value - quotaConsumption.totalUsage

    if (remainingQuota > numberOfFollowers.followers) {
      const url = `${process.env.LINE_MESSAGING_API}/message/broadcast`
      const response: AxiosResponse = await axios.post(url, payload, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      })

      if (response.status === 200) {
        return response.data
      } else {
        throw new Error(`Failed to send broadcast. API responded with status: ${response.status}`)
      }
    } else {
      console.warn('‚ùóÔ∏èRemaining quota is less than number of followers. Broadcast skipped.')
    }
  } catch (error: any) {
    console.error('Error in broadcastConsumption:', error.message || error)
    throw error
  }
}

async function getQuota(accessToken: string): Promise<QuotaResponse> {
  const url = `${process.env.LINE_MESSAGING_API}/message/quota`
  const response: AxiosResponse<QuotaResponse> = await axios.get(url, {
    headers: { Authorization: `Bearer ${accessToken}` },
  })
  return response.data
}

async function getConsumption(accessToken: string): Promise<ConsumptionResponse> {
  const url = `${process.env.LINE_MESSAGING_API}/message/quota/consumption`
  const response: AxiosResponse<ConsumptionResponse> = await axios.get(url, {
    headers: { Authorization: `Bearer ${accessToken}` },
  })
  return response.data
}

async function getNumberOfFollowers(accessToken: string): Promise<FollowerResponse> {
  const currentDate = new Date().toISOString().slice(0, 10).replace(/-/g, '')
  const url = `${process.env.LINE_MESSAGING_API}/insight/followers?date=${currentDate}`
  const response: AxiosResponse<FollowerResponse> = await axios.get(url, {
    headers: { Authorization: `Bearer ${accessToken}` },
  })
  return response.data
}

/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á user ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 500 ‡∏Ñ‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡πà‡∏≠‡∏¢
 * Limitation: ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 500 user ‡∏ï‡πà‡∏≠ 1 request
 */
export const multicast = async (payload: MulticastPayload): Promise<any> => {
  try {
    const accessToken = await issueMessagingStatelessChannelAccessToken()
    console.log("accessToken",accessToken)
    const url = `${process.env.LINE_MESSAGING_API}/message/multicast`

    const response: AxiosResponse = await axios.post(url, payload, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
    })

    if (response.status === 200) {
      return response.data
    } else {
      throw new Error(`Failed to send multicast. API responded with status: ${response.status}`)
    }
  } catch (error: any) {
    console.error('‚ùå Error in multicast:', error.message)
    throw error
  }
}

/**
 * ‡∏™‡πà‡∏á push message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á userId ‡∏î‡πâ‡∏ß‡∏¢ stateless access token (JWT v2.1)
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö push message ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ token v2.1 ‡∏Å‡πà‡∏≠‡∏ô, ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏Ñ‡∏£‡∏±‡πâ‡∏á
 */
export const pushWithStateless = async (userId: string, messages: LineMessage[]): Promise<any> => {
  try {
    const accessToken = await issueTokenv2_1()
    const url = `${process.env.LINE_MESSAGING_API}/message/push`

    const response: AxiosResponse = await axios.post(
      url,
      {
        to: userId,
        messages,
      },
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      },
    )

    if (response.status === 200) {
      return response.data
    } else {
      throw new Error(`Failed to send push. API responded with status: ${response.status}`)
    }
  } catch (error: any) {
    console.error('‚ùå Error in pushWithStateless:', error.message)
    throw error
  }
}

/**
 * ‡∏™‡πà‡∏á push message ‡∏û‡∏£‡πâ‡∏≠‡∏° custom aggregation unit
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö campaign ‡∏´‡∏£‡∏∑‡∏≠ analytics
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ token v2.1 ‡∏Å‡πà‡∏≠‡∏ô, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î customAggregationUnits
 */
export const pushWithCustomAggregation = async (
  userId: string,
  messages: LineMessage[],
  customAggregationUnits: string[],
): Promise<any> => {
  try {
    const accessToken = await issueTokenv2_1()
    const url = `${process.env.LINE_MESSAGING_API}/message/push`

    const response: AxiosResponse = await axios.post(
      url,
      {
        to: userId,
        messages,
        customAggregationUnits,
      },
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      },
    )

    if (response.status === 200) {
      return response.data
    } else {
      throw new Error(
        `Failed to send push with custom aggregation. API responded with status: ${response.status}`,
      )
    }
  } catch (error: any) {
    console.error('‚ùå Error in pushWithCustomAggregation:', error.message)
    throw error
  }
}

/**
 * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î richmenu ‡πÉ‡∏´‡πâ user ‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö personalize richmenu
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ stateless access token, 1 user ‡∏°‡∏µ‡πÑ‡∏î‡πâ 1 richmenu
 */
export const richmenuSetIndividual = async (userId: string, richmenuId: string): Promise<void> => {
  try {
    const accessToken = await issueMessagingStatelessChannelAccessToken()
    const url = `${process.env.LINE_MESSAGING_API}/user/${userId}/richmenu/${richmenuId}`
    await axios.post(
      url,
      {},
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      },
    )
  } catch (error: any) {
    console.error('‚ùå Error in richmenuSetIndividual:', error.message)
    throw error
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á access token
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validate token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LINE
 * Limitation: ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ access token ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 */
export const verifyAccessToken = async (accessToken: string, expectedChannelId?: string) => {
  try {
    const response = await axios.request({
      method: 'GET',
      url: 'https://api.line.me/oauth2/v2.1/verify',
      params: {
        access_token: accessToken,
      },
    })

    if (response.status === 200) {
      if (expectedChannelId) {
        return response.data.client_id === expectedChannelId
      }

      return true
    } else {
      throw new Error(`‚ùå Failed to verify access token. Status: ${response.status}`)
    }
  } catch (error) {
    console.error('‚ùå Error in verifyAccessToken:', error)
    throw error
  }
}

/**
 * ‡∏î‡∏∂‡∏á profile ‡∏à‡∏≤‡∏Å LIFF access token
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LIFF app ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á verify access token ‡∏Å‡πà‡∏≠‡∏ô, ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user ‡∏ó‡∏µ‡πà login ‡∏ú‡πà‡∏≤‡∏ô LIFF
 */
export const getProfileByLiffAccessToken = async (liffAccessToken: string) => {
  try {
    // Verify if LIFF access token is valid and generated from the correct channel
    await verifyAccessToken(liffAccessToken, process.env.LINE_LIFF_CHANNEL_ID)

    const response = await axios.request<LineLoginProfileResponse>({
      method: 'GET',
      url: 'https://api.line.me/v2/profile',
      headers: {
        Authorization: `Bearer ${liffAccessToken}`,
      },
    })

    return response.data
  } catch (error) {
    console.error('‚ùå Error in getProfileByLiffAccessToken:', error)
    throw error
  }
}

/**
 * ‡∏Ç‡∏≠ service notification token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LIFF
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á service notification ‡∏ú‡πà‡∏≤‡∏ô LIFF
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ LIFF access token ‡πÅ‡∏•‡∏∞ stateless access token
 */
export const generateServiceNotificationToken = async (liffAccessToken: string) => {
  try {
    const accessToken = await issueLiffStatelessChannelAccessToken()

    const response = await lineApiInstance.request<ServiceNotificationTokenResponse>({
      method: 'POST',
      url: '/message/v3/notifier/token',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
      data: {
        liffAccessToken,
      },
    })

    return response.data
  } catch (error) {
    console.error('‚ùå Error in generateServiceNotificationToken:', error)
    throw error
  }
}

/**
 * ‡∏™‡πà‡∏á service notification message
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô service notification
 * Limitation: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ notificationToken ‡πÅ‡∏•‡∏∞ templateName ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
export const sendServiceMessage = async (
  notificationToken: string,
  templateName: string,
  variables: Record<string, string> = {},
) => {
  try {
    const accessToken = await issueLiffStatelessChannelAccessToken()

    const response = await lineApiInstance.request<ServiceNotificationTokenResponse>({
      method: 'POST',
      url: '/message/v3/notifier/send?target=service',
      headers: {
        Authorization: `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
      data: {
        templateName,
        params: variables,
        notificationToken,
      },
    })

    console.log('‚úÖ sendServiceMessage response:', response.data)

    return response.data
  } catch (error) {
    console.error('‚ùå Error in sendServiceMessage:', error)
    throw error
  }
}
